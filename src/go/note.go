//函数：
//定义：具有特定含义的代码
//作用：1，避免重复写代码，2，增强函数的扩展性
//使用 1，先要定义函数 2，调用函数
//函数类型func(参数类型列表)（返回类型列表）
//函数也是一种数据类型
//一个函数如果定义了返回类型一定要用到return语句
//"_"，空标识符可以舍弃值
//函数中有分支，每个分支都要有return
//如果一个函数没有定义返回值也可以用return结束
//递归函数，函数调用自身，但是要在其中添加一个出口，并且应该越来越像出口靠近
//多返回值
//形参：形式上的参数，用来接收传入的值
//实参：实际上的参数（要传入的值）
//形参和实参要一一对应（顺序，类型，个数）
//值传递是将值copy给形参（普通类型，数组，结构体）
//引用传递变量指向同一个内存（切片类型，map,chan）
//函数的零值是nil
//函数的作用域变量可以使用的范围 1，局部变量，函数内定义的变量，全局变量，函数外部引用的变量
//全局变量不能简短声明
//匿名函数：没有名的函数，1，结尾直接加括号传值 2，把它赋值给一个变量
//形参中的数据需要从外部接收
//可变参数：参数类型确定而数量不确定1，一个函数只能有一个可变参数并且要放到最后
//可变参数相当于一个切片
//可变参数可以倒入零到多个同类型参数
//获取切片中的值可以在切片名称后面加...
//differ让运行延迟 1，多个differ倒叙执行，differ只让运行延迟，不让调用延迟
//differ 在return之前执行
//外围函数
//高阶函数一个函数中调用了另一个函数就叫高阶函数被调用的函数叫回调函数
package main

//import (
//	"fmt"
//	"os"
//)
//
//func pain1 () (int,string){}
//
//
//func main()  {
//	filenames := []string{"xx.txt", "yy.txt"}
//	for _, name := range filenames {
//		f, err := os.Open(name)
//		if err != nil {
//			panic(err)
//		}
//
//		defer f.Close()
//		// 处理文件
//		// ....
//	}
//}
type A struct {
	name string
}

func (p A) GetName() string {
	return p.name

}
//
///
//func ( a string)number(string){
//}
//func main()  {
//	fmt.Sprintf("%T"a.number)
//
//}

